{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n#\n\n\nProvides a number of helpful commands for your use while developing your application.\n\n\nFeatures\n#\n\n\nBuilt on top of great technology.\n\n\n\n\nSolid Base: Built with \nSymfony Console component\n.\n\n\nGenerators: Generate boilerplate code for a rapid application development.\n\n\nModular Migrations: Manage your database scheme's evolution through independent versions.\n\n\nSeeders: Easily fill your database with test data after it's created.\n\n\nTest environment: Test your application with ease without installing a web server.\n\n\nInteractive: Every command also includes a help screen which describes available options.\n\n\n\n\nDemo\n#", 
            "title": "Home"
        }, 
        {
            "location": "/#overview", 
            "text": "Provides a number of helpful commands for your use while developing your application.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Built on top of great technology.   Solid Base: Built with  Symfony Console component .  Generators: Generate boilerplate code for a rapid application development.  Modular Migrations: Manage your database scheme's evolution through independent versions.  Seeders: Easily fill your database with test data after it's created.  Test environment: Test your application with ease without installing a web server.  Interactive: Every command also includes a help screen which describes available options.", 
            "title": "Features"
        }, 
        {
            "location": "/#demo", 
            "text": "", 
            "title": "Demo"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n#\n\n\nConfig the \nbin-dir\n path inside your \ncomposer.json\n file:\n\n\nconfig\n:\n \n{\n\n    \nbin-dir\n:\n \nbin\n\n\n}\n\n\n\n\n\n\nNext, install the package with composer:\n\n\ncomposer require craftsman/cli\n\n\n\n\n\nInstall the environment variables:\n\n\ncp path/to/vendor/craftsman/cli/.craftsman.example .craftsman\n\n\n\n\n\nIf you configure the bin directory you can run the command like this:\n\n\nphp bin/craftsman\n\n\n\n\n\nIf you don't, Craftsman should be listed as a vendor binary:\n\n\nphp path/to/vendor/bin/craftsman", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Config the  bin-dir  path inside your  composer.json  file:  config :   { \n     bin-dir :   bin  }   Next, install the package with composer:  composer require craftsman/cli  Install the environment variables:  cp path/to/vendor/craftsman/cli/.craftsman.example .craftsman  If you configure the bin directory you can run the command like this:  php bin/craftsman  If you don't, Craftsman should be listed as a vendor binary:  php path/to/vendor/bin/craftsman", 
            "title": "Installation"
        }, 
        {
            "location": "/usage/", 
            "text": "List Commands\n#\n\n\nView an updated list of all available commands that Craftsman provides:\n\n\nphp craftsman list\n\n\n\n\n\nHelp Screen\n#\n\n\nEvery command includes a help screen which displays the command's available arguments. To view a help screen from a command, add the name of the command with help:\n\n\nphp craftsman help migrate:latest", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#list-commands", 
            "text": "View an updated list of all available commands that Craftsman provides:  php craftsman list", 
            "title": "List Commands"
        }, 
        {
            "location": "/usage/#help-screen", 
            "text": "Every command includes a help screen which displays the command's available arguments. To view a help screen from a command, add the name of the command with help:  php craftsman help migrate:latest", 
            "title": "Help Screen"
        }, 
        {
            "location": "/commands/", 
            "text": "Console\n#\n\n\nCraftsman comes with a built in \nREPL command\n  that makes it easy to explore your application in an interactive console. You can start the interactive console using:\n\n\nphp craftsman console\n\n\n\n\n\nThis will bootstrap your application and start an interactive console. At this point you can interact with your application code and execute queries using your application\u2019s models:\n\n\nphp craftsman console\n\n\n\nCraftsman v4.2.1 Console\n\n\n---------------------------------------------------------------\n\n\nCodeigniter : \n$\nCI\n\n\nPath: ~/codeigniter/application\n\n\n---------------------------------------------------------------\n\n\nPsy Shell v0.7.2 (PHP 7.0.12 \u2014 cli) by Justin Hileman\n\n\n \n$\nCI\n-\nload-\nmodel(\nfoo_model\n);\n\n\n=\n CI_Loader \n{#\n153}\n\n\n \n$\nFoo\n = \n$\nCI\n-\nfoo_model;\n\n\n=\n Foo_model \n{#\n313}\n\n\n \n$\nFoo\n-\nfind_all();\n\n\n\n\n\n\nTo quit you can use \nCTRL-C\n or by typing \nexit\n.\n\n\n\n\nServe\n#\n\n\nTypically, you may use a web server such as Apache or Nginx to serve your Codeigniter applications. If you are on PHP 5.4+ and would like to use PHP's built-in development server, you may use the serve command:\n\n\nphp craftsman serve\n\n\n\n\n\nBy default the HTTP-server will listen to port 8000. However if that port is already in use or you wish to serve multiple applications this way, you might want to specify what port to use. Just add the --port argument:\n\n\nphp craftsman serve --port=8080\n\n\n\n\n\n\n\nMigrations\n#\n\n\nMigration schemes are simple files that hold the commands to apply changes to your database. They may create/update tables or fields, but they are not limited to just changing the schema, you could use them to fix bad data in the database or populate new fields.\n\n\n\n\nDatabase Connection Required\n\n\nIf you're going to use Migration Commands you should configure your \"application/config/database.php\" settings to access to your database.\n\n\n\n\nFile names\n#\n\n\nEach Migration may run in numeric order forward or backwards depending on the method taken. Two numbering styles are available:\n\n\n\n\nSequential\n: each migration is enumerated in sequence, starting with 001. Each number must be three digits, and there must not be any gaps in the sequence.\n\n\nTimestamp\n: each migration is enumerated with a timestamp, in \nYYYYMMDDHHIISS\n format (e.g. 20121031100537). This helps to prevent conflicts when working in a team environment.\n\n\n\n\nBy default Craftsman uses the 'Timestamp' style but you can change to 'Sequential' using the \n--sequential\n argument.\n\n\nDisplaying info\n#\n\n\nYou can display the current migration status with the command:\n\n\nphp craftsman migrate:check\n\n\n\n\n\nOutput:\n\n\n(in ~/workspace/codeigniter/application/)\n\n----------- ----------- ---------------- ------------------\n Name        Type        Local version    Database version  \n----------- ----------- ---------------- ------------------\n ci_system   timestamp   20161106010705   20161106010705    \n----------- ----------- ---------------- ------------------\n\nMigration directory: migrations/\n\n[OK] Database is up-to-date.    \n\n\n\n\n\nBelow the information table, there is a legend witch indicates the action to take. If a database update is available, the legend displays the following message:\n\n\n! [NOTE] The Database is not up-to-date with the latest changes, run:\nmigrate:latest\n to update them.\n\n\n\n\n\nRunning migrations\n#\n\n\nEach migration command shows relevant information about the db scheme changes by default. Here's a list of possible options.\n\n\nLatest\n\n\nAllows you to migrate the latest version, the migration class will use the very newest migration found in the \nFilesystem\n.\n\n\nphp craftsman migrate:latest\n\n\n\n\n\nVersion\n\n\nAllows you to roll back changes or step forwards pro-grammatically to specific versions.\n\n\nphp craftsman migrate:version \nnumber\n\n\n\n\n\n\nRolling-back\n#\n\n\nAllows you to quickly roll back and forth through the history of the migration schema, so as to work with desired version. Here's a list of possible options.\n\n\nRollback the last migration\n#\n\n\nphp craftsman migrate:rollback\n\n\n\n\n\nRollback all migrations\n#\n\n\nphp craftsman migrate:reset\n\n\n\n\n\nRollback all migrations and run them all again\n#\n\n\nphp craftsman migrate:refresh\n\n\n\n\n\n\n\nSeeders\n#\n\n\nCraftsman comes with a simple method of seeding your database. Seeders may have any name you wish, but probably should follow the \nCodeIgniter Style Guide\n.\n\n\nA seeder class only contains the \nrun()\n method by default, this method is called when the \ndb:seed\n command is executed. Within the run method, you may insert data into your database however you wish. Here's an example:\n\n\n?php\n \nif\n \n(\n \n!\n \ndefined\n(\nBASEPATH\n))\n \nexit\n(\nNo direct script access allowed\n);\n\n\n\nuse\n \nCraftsman\\Classes\\Seeder\n;\n\n\n\nclass\n \nFoo\n \nextends\n \nSeeder\n \nimplements\n \n\\Craftsman\\Interfaces\\Seeder\n\n\n{\n\n  \nprivate\n \n$table\n \n=\n \nci_foo\n;\n\n\n  \npublic\n \nfunction\n \nrun\n()\n\n  \n{\n   \n    \n$this\n-\ndb\n-\ninsert\n(\n$this\n-\ntable\n,\n \n[\n\n      \ntitle\n \n=\n \nTitle 1\n,\n\n      \nname\n  \n=\n \nName 1\n,\n\n      \ndate\n  \n=\n \ndate\n(\nY-m-d H:i:s\n)\n\n    \n]);\n\n  \n}\n\n\n}\n\n\n\n/* End of file Foo.php */\n\n\n/* Location: /path/to/application/seeders/Foo.php */\n\n\n?\n\n\n\n\n\n\nOne you have written your seeder class, you may use the command:\n\n\nphp craftsman db:seed \nname\n\n\n\n\n\n\nCheck the \nQuery Builder Class\n to manually insert data.\n\n\nGenerators\n#\n\n\nCraftsman provides a variety of generators to speed up your development process.\n\n\n\n\n\nController\n#\n\n\nGenerate a controller with the command:\n\n\nphp craftsman generate:controller \nname\n\n\n\n\n\n\nOutput:\n\n\n?php\n \nif\n \n(\n \n!\n \ndefined\n(\nBASEPATH\n))\n \nexit\n(\nNo direct script access allowed\n);\n\n\n\nclass\n \nFoo\n \nextends\n \nCI_Controller\n\n\n{\n\n    \n/**\n\n\n     * Display a listing of the resource.\n\n\n     * GET /foo\n\n\n     */\n\n    \npublic\n \nfunction\n \nindex\n()\n\n    \n{\n\n    \n}\n\n\n    \n/**\n\n\n     * Display the specified resource.\n\n\n     * GET /foo/read/{id}\n\n\n     *\n\n\n     * @param  int  $id\n\n\n     */\n\n    \npublic\n \nfunction\n \nread\n(\n$id\n)\n\n    \n{\n\n    \n}\n   \n\n    \n/**\n\n\n     * Show the form for creating a new resource.\n\n\n     * GET /foo/create\n\n\n     */\n\n    \npublic\n \nfunction\n \ncreate\n()\n\n    \n{\n\n    \n}\n\n\n    \n/**\n\n\n     * Store a newly created resource in storage.\n\n\n     * POST /foo/store\n\n\n     */\n\n    \npublic\n \nfunction\n \nstore\n()\n\n    \n{\n\n    \n}\n\n\n    \n/**\n\n\n     * Show the form for editing the specified resource.\n\n\n     * GET /foo/edit/{id}\n\n\n     *\n\n\n     * @param  int  $id\n\n\n     */\n\n    \npublic\n \nfunction\n \nedit\n(\n$id\n)\n\n    \n{\n\n    \n}\n   \n\n    \n/**\n\n\n     * Update the specified resource in storage.\n\n\n     * PUT /foo/update/{id}\n\n\n     *\n\n\n     * @param  int  $id\n\n\n     */\n\n    \npublic\n \nfunction\n \nupdate\n(\n$id\n)\n\n    \n{\n\n    \n}\n\n\n    \n/**\n\n\n     * Remove the specified resource from storage.\n\n\n     * DELETE /foo/delete/{id}\n\n\n     *\n\n\n     * @param  int  $id\n\n\n     */\n\n    \npublic\n \nfunction\n \ndelete\n(\n$id\n)\n\n    \n{\n\n    \n}\n\n\n}\n\n\n\n/* End of file Foo.php */\n\n\n/* Location: /path/to/application/controllers/Foo.php */\n  \n\n?\n\n\n\n\n\n\nModel\n#\n\n\nGenerate a model with the command:\n\n\nphp craftsman generate:model \nname\n\n\n\n\n\n\nOutput:\n\n\n?php\n \nif\n \n(\n!\n \ndefined\n(\nBASEPATH\n))\n \nexit\n(\nNo direct script access allowed\n);\n\n\n\nclass\n \nFoo_model\n \nextends\n \nCI_Model\n\n\n{\n\n    \npublic\n \nfunction\n \n__construct\n()\n\n    \n{\n\n        \nparent\n::\n__construct\n();\n\n        \n$this\n-\nload\n-\ndatabase\n();\n    \n    \n}\n\n\n}\n\n\n\n/* End of file Foo_model.php */\n\n\n/* Location: /path/to/application/models/Foo_model.php */\n\n\n?\n\n\n\n\n\n\nMigration\n#\n\n\nGenerate a migration with the command:\n\n\nphp craftsman generate:migration \nname\n\n\n\n\n\n\nRegardless of which style you choose to use, the generator command will prefix your files with the migration number. For example:\n\n\n\n\n001_add_blog.php (sequential)\n\n\n20121031100537_add_blog.php (timestamp)    \n\n\n\n\nName prefixes\n#\n\n\nUse the prefix \ncreate_\n or \nmodify_\n if you want to create a migration with the appropriate \nadd_column\n and \nupdate_column\n statements. Here's an example:\n\n\nphp craftsman generate:migration create_users firstname:varchar lastname:varchar email:varchar active:smallint\n\n\n\n\n\nOutput:\n\n\n?php\n \nif\n \n(\n \n!\n \ndefined\n(\nBASEPATH\n))\n \nexit\n(\nNo direct script access allowed\n);\n\n\n\nclass\n \nMigration_create_users\n \nextends\n \nCI_Migration\n \n{\n\n\n    \npublic\n \nfunction\n \n__construct\n()\n\n    \n{\n\n        \n$this\n-\nload\n-\ndbforge\n();\n\n        \n$this\n-\nload\n-\ndatabase\n();\n\n    \n}\n\n\n    \npublic\n \nfunction\n \nup\n()\n\n    \n{\n\n        \n$this\n-\ncreate_users_table\n();\n\n    \n}\n\n\n    \npublic\n \nfunction\n \ndown\n()\n\n    \n{\n\n        \n$this\n-\ndbforge\n-\ndrop_table\n(\nci_users\n);\n\n    \n}\n\n\n    \nprivate\n \nfunction\n \ncreate_users_table\n()\n\n    \n{\n\n        \n$this\n-\ndbforge\n-\nadd_field\n(\narray\n(\n\n            \nid\n \n=\n \narray\n(\n\n                \ntype\n \n=\n \nINT\n,\n\n                \nnull\n \n=\n \nFALSE\n,\n\n                \nauto_increment\n \n=\n \nTRUE\n\n            \n),\n\n            \nfirstname\n \n=\n \narray\n(\n\n                \ntype\n \n=\n \nVARCHAR\n,\n\n                \nconstraint\n \n=\n \n100\n,\n\n                \nnull\n \n=\n \nFALSE\n\n            \n),\n\n            \nlastname\n \n=\n \narray\n(\n\n                \ntype\n \n=\n \nVARCHAR\n,\n\n                \nconstraint\n \n=\n \n100\n,\n\n                \nnull\n \n=\n \nTRUE\n\n            \n),\n\n            \nemail\n \n=\n \narray\n(\n\n                \ntype\n \n=\n \nVARCHAR\n,\n\n                \nconstraint\n \n=\n \n100\n,\n\n                \nnull\n \n=\n \nTRUE\n\n            \n),\n\n            \nactive\n \n=\n \narray\n(\n\n                \ntype\n \n=\n \nSMALLINT\n,\n\n                \nnull\n \n=\n \nFALSE\n,\n\n                \ndefault\n \n=\n \n1\n\n            \n),\n\n        \n));\n\n        \n$this\n-\ndbforge\n-\nadd_key\n(\nid\n,\n \nTRUE\n);\n\n        \n$this\n-\ndbforge\n-\ncreate_table\n(\nci_users\n,\nTRUE\n);\n      \n    \n}\n\n\n}\n\n\n\n/* End of file 001_create_users.php.php */\n\n\n/* Location: path/to/application/migrations/001_create_users.php */\n\n\n?\n\n\n\n\n\n\nNow it's your turn to give the finishing touches before running this scheme. Check the \nDatabase Forge documentation\n for more information about Codeigniter Migrations.\n\n\nSeeders\n#\n\n\nGenerate a seeder with the command:\n\n\nphp craftsman generate:seeder \nname\n\n\n\n\n\n\nOutput:\n\n\n?php\n \nif\n \n(\n \n!\n \ndefined\n(\nBASEPATH\n))\n \nexit\n(\nNo direct script access allowed\n);\n\n\n\nuse\n \nCraftsman\\Classes\\Seeder\n;\n\n\n\nclass\n \nFoo\n \nextends\n \nSeeder\n \nimplements\n \n\\Craftsman\\Interfaces\\Seeder\n\n\n{\n\n  \nprivate\n \n$table\n \n=\n \nci_foo\n;\n\n\n  \npublic\n \nfunction\n \nrun\n()\n\n  \n{\n   \n    \n$this\n-\ndb\n-\ninsert\n(\n$this\n-\ntable\n,\n \n[\n\n      \n// insert your data here...\n\n    \n]);\n\n  \n}\n\n\n}\n\n\n\n/* End of file Foo.php */\n\n\n/* Location: /path/to/application/seeders/Foo.php */\n\n\n?\n\n\n\n\n\n\nAll seed classes are stored by default in your \npath/to/application/seeders\n folder.", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#console", 
            "text": "Craftsman comes with a built in  REPL command   that makes it easy to explore your application in an interactive console. You can start the interactive console using:  php craftsman console  This will bootstrap your application and start an interactive console. At this point you can interact with your application code and execute queries using your application\u2019s models:  php craftsman console  Craftsman v4.2.1 Console  ---------------------------------------------------------------  Codeigniter :  $ CI  Path: ~/codeigniter/application  ---------------------------------------------------------------  Psy Shell v0.7.2 (PHP 7.0.12 \u2014 cli) by Justin Hileman    $ CI - load- model( foo_model );  =  CI_Loader  {# 153}    $ Foo  =  $ CI - foo_model;  =  Foo_model  {# 313}    $ Foo - find_all();   To quit you can use  CTRL-C  or by typing  exit .", 
            "title": "Console"
        }, 
        {
            "location": "/commands/#serve", 
            "text": "Typically, you may use a web server such as Apache or Nginx to serve your Codeigniter applications. If you are on PHP 5.4+ and would like to use PHP's built-in development server, you may use the serve command:  php craftsman serve  By default the HTTP-server will listen to port 8000. However if that port is already in use or you wish to serve multiple applications this way, you might want to specify what port to use. Just add the --port argument:  php craftsman serve --port=8080", 
            "title": "Serve"
        }, 
        {
            "location": "/commands/#migrations", 
            "text": "Migration schemes are simple files that hold the commands to apply changes to your database. They may create/update tables or fields, but they are not limited to just changing the schema, you could use them to fix bad data in the database or populate new fields.   Database Connection Required  If you're going to use Migration Commands you should configure your \"application/config/database.php\" settings to access to your database.", 
            "title": "Migrations"
        }, 
        {
            "location": "/commands/#file-names", 
            "text": "Each Migration may run in numeric order forward or backwards depending on the method taken. Two numbering styles are available:   Sequential : each migration is enumerated in sequence, starting with 001. Each number must be three digits, and there must not be any gaps in the sequence.  Timestamp : each migration is enumerated with a timestamp, in  YYYYMMDDHHIISS  format (e.g. 20121031100537). This helps to prevent conflicts when working in a team environment.   By default Craftsman uses the 'Timestamp' style but you can change to 'Sequential' using the  --sequential  argument.", 
            "title": "File names"
        }, 
        {
            "location": "/commands/#displaying-info", 
            "text": "You can display the current migration status with the command:  php craftsman migrate:check  Output:  (in ~/workspace/codeigniter/application/)\n\n----------- ----------- ---------------- ------------------\n Name        Type        Local version    Database version  \n----------- ----------- ---------------- ------------------\n ci_system   timestamp   20161106010705   20161106010705    \n----------- ----------- ---------------- ------------------\n\nMigration directory: migrations/\n\n[OK] Database is up-to-date.      Below the information table, there is a legend witch indicates the action to take. If a database update is available, the legend displays the following message:  ! [NOTE] The Database is not up-to-date with the latest changes, run: migrate:latest  to update them.", 
            "title": "Displaying info"
        }, 
        {
            "location": "/commands/#running-migrations", 
            "text": "Each migration command shows relevant information about the db scheme changes by default. Here's a list of possible options.  Latest  Allows you to migrate the latest version, the migration class will use the very newest migration found in the  Filesystem .  php craftsman migrate:latest  Version  Allows you to roll back changes or step forwards pro-grammatically to specific versions.  php craftsman migrate:version  number", 
            "title": "Running migrations"
        }, 
        {
            "location": "/commands/#rolling-back", 
            "text": "Allows you to quickly roll back and forth through the history of the migration schema, so as to work with desired version. Here's a list of possible options.", 
            "title": "Rolling-back"
        }, 
        {
            "location": "/commands/#rollback-the-last-migration", 
            "text": "php craftsman migrate:rollback", 
            "title": "Rollback the last migration"
        }, 
        {
            "location": "/commands/#rollback-all-migrations", 
            "text": "php craftsman migrate:reset", 
            "title": "Rollback all migrations"
        }, 
        {
            "location": "/commands/#rollback-all-migrations-and-run-them-all-again", 
            "text": "php craftsman migrate:refresh", 
            "title": "Rollback all migrations and run them all again"
        }, 
        {
            "location": "/commands/#seeders", 
            "text": "Craftsman comes with a simple method of seeding your database. Seeders may have any name you wish, but probably should follow the  CodeIgniter Style Guide .  A seeder class only contains the  run()  method by default, this method is called when the  db:seed  command is executed. Within the run method, you may insert data into your database however you wish. Here's an example:  ?php   if   (   !   defined ( BASEPATH ))   exit ( No direct script access allowed );  use   Craftsman\\Classes\\Seeder ;  class   Foo   extends   Seeder   implements   \\Craftsman\\Interfaces\\Seeder  { \n   private   $table   =   ci_foo ; \n\n   public   function   run () \n   {    \n     $this - db - insert ( $this - table ,   [ \n       title   =   Title 1 , \n       name    =   Name 1 , \n       date    =   date ( Y-m-d H:i:s ) \n     ]); \n   }  }  /* End of file Foo.php */  /* Location: /path/to/application/seeders/Foo.php */  ?   One you have written your seeder class, you may use the command:  php craftsman db:seed  name   Check the  Query Builder Class  to manually insert data.", 
            "title": "Seeders"
        }, 
        {
            "location": "/commands/#generators", 
            "text": "Craftsman provides a variety of generators to speed up your development process.", 
            "title": "Generators"
        }, 
        {
            "location": "/commands/#controller", 
            "text": "Generate a controller with the command:  php craftsman generate:controller  name   Output:  ?php   if   (   !   defined ( BASEPATH ))   exit ( No direct script access allowed );  class   Foo   extends   CI_Controller  { \n     /**       * Display a listing of the resource.       * GET /foo       */ \n     public   function   index () \n     { \n     } \n\n     /**       * Display the specified resource.       * GET /foo/read/{id}       *       * @param  int  $id       */ \n     public   function   read ( $id ) \n     { \n     }    \n\n     /**       * Show the form for creating a new resource.       * GET /foo/create       */ \n     public   function   create () \n     { \n     } \n\n     /**       * Store a newly created resource in storage.       * POST /foo/store       */ \n     public   function   store () \n     { \n     } \n\n     /**       * Show the form for editing the specified resource.       * GET /foo/edit/{id}       *       * @param  int  $id       */ \n     public   function   edit ( $id ) \n     { \n     }    \n\n     /**       * Update the specified resource in storage.       * PUT /foo/update/{id}       *       * @param  int  $id       */ \n     public   function   update ( $id ) \n     { \n     } \n\n     /**       * Remove the specified resource from storage.       * DELETE /foo/delete/{id}       *       * @param  int  $id       */ \n     public   function   delete ( $id ) \n     { \n     }  }  /* End of file Foo.php */  /* Location: /path/to/application/controllers/Foo.php */    ?", 
            "title": "Controller"
        }, 
        {
            "location": "/commands/#model", 
            "text": "Generate a model with the command:  php craftsman generate:model  name   Output:  ?php   if   ( !   defined ( BASEPATH ))   exit ( No direct script access allowed );  class   Foo_model   extends   CI_Model  { \n     public   function   __construct () \n     { \n         parent :: __construct (); \n         $this - load - database ();     \n     }  }  /* End of file Foo_model.php */  /* Location: /path/to/application/models/Foo_model.php */  ?", 
            "title": "Model"
        }, 
        {
            "location": "/commands/#migration", 
            "text": "Generate a migration with the command:  php craftsman generate:migration  name   Regardless of which style you choose to use, the generator command will prefix your files with the migration number. For example:   001_add_blog.php (sequential)  20121031100537_add_blog.php (timestamp)", 
            "title": "Migration"
        }, 
        {
            "location": "/commands/#name-prefixes", 
            "text": "Use the prefix  create_  or  modify_  if you want to create a migration with the appropriate  add_column  and  update_column  statements. Here's an example:  php craftsman generate:migration create_users firstname:varchar lastname:varchar email:varchar active:smallint  Output:  ?php   if   (   !   defined ( BASEPATH ))   exit ( No direct script access allowed );  class   Migration_create_users   extends   CI_Migration   { \n\n     public   function   __construct () \n     { \n         $this - load - dbforge (); \n         $this - load - database (); \n     } \n\n     public   function   up () \n     { \n         $this - create_users_table (); \n     } \n\n     public   function   down () \n     { \n         $this - dbforge - drop_table ( ci_users ); \n     } \n\n     private   function   create_users_table () \n     { \n         $this - dbforge - add_field ( array ( \n             id   =   array ( \n                 type   =   INT , \n                 null   =   FALSE , \n                 auto_increment   =   TRUE \n             ), \n             firstname   =   array ( \n                 type   =   VARCHAR , \n                 constraint   =   100 , \n                 null   =   FALSE \n             ), \n             lastname   =   array ( \n                 type   =   VARCHAR , \n                 constraint   =   100 , \n                 null   =   TRUE \n             ), \n             email   =   array ( \n                 type   =   VARCHAR , \n                 constraint   =   100 , \n                 null   =   TRUE \n             ), \n             active   =   array ( \n                 type   =   SMALLINT , \n                 null   =   FALSE , \n                 default   =   1 \n             ), \n         )); \n         $this - dbforge - add_key ( id ,   TRUE ); \n         $this - dbforge - create_table ( ci_users , TRUE );       \n     }  }  /* End of file 001_create_users.php.php */  /* Location: path/to/application/migrations/001_create_users.php */  ?   Now it's your turn to give the finishing touches before running this scheme. Check the  Database Forge documentation  for more information about Codeigniter Migrations.", 
            "title": "Name prefixes"
        }, 
        {
            "location": "/commands/#seeders_1", 
            "text": "Generate a seeder with the command:  php craftsman generate:seeder  name   Output:  ?php   if   (   !   defined ( BASEPATH ))   exit ( No direct script access allowed );  use   Craftsman\\Classes\\Seeder ;  class   Foo   extends   Seeder   implements   \\Craftsman\\Interfaces\\Seeder  { \n   private   $table   =   ci_foo ; \n\n   public   function   run () \n   {    \n     $this - db - insert ( $this - table ,   [ \n       // insert your data here... \n     ]); \n   }  }  /* End of file Foo.php */  /* Location: /path/to/application/seeders/Foo.php */  ?   All seed classes are stored by default in your  path/to/application/seeders  folder.", 
            "title": "Seeders"
        }, 
        {
            "location": "/extra/", 
            "text": "Modular Migrations\n#\n\n\nIf you're familiar with the \nCodeigniter Migration Class\n, it is impossible to maintain separated migration files in your application, you need to merge these files in one directory and update the migration file name. With Craftsman you can manage your database scheme's evolution through independent versions.\n\n\nFor this example we will assume the following directory structure:\n\n\n+- APPPATH/\n| +- migrations/\n| | +- 001_add_blog.php\n| | +- 002_add_posts.php\n\n\n\n\n\nA library could use a database scheme like \nIon Auth\n, \nCommunity Auth\n, etc. Here's an example:\n\n\n+- APPPATH\n| +- libraries/\n| | +- fooLib/\n| | | +- migrations\n| | | | +- 001_add_session.php\n| | | | +- 002_add_other_stuff.php\n\n\n\n\n\nIn order to run this migrations, include the \n--path\n argument:\n\n\nphp craftsman migrate:latest --path=\napplication/libraries/fooLib\n\n\n\n\n\n\nAnd your migrations are now independent. In your database you can see that every module have an assigned version:\n\n\nmysql\n SELECT * FROM ci_migrations;\n\n+---------------+---------+\n| module        | version |\n+---------------+---------+\n| ci_system     |       2 |\n| foolib        |       2 |\n+---------------+---------+\n\n\n\n\n\nAlso you can change the module name in the database with the \n--name\n argument:\n\n\nphp craftsman migrate:latest --name=\nfoo\n --path=\napplication/libraries/fooLib", 
            "title": "Resources"
        }, 
        {
            "location": "/extra/#modular-migrations", 
            "text": "If you're familiar with the  Codeigniter Migration Class , it is impossible to maintain separated migration files in your application, you need to merge these files in one directory and update the migration file name. With Craftsman you can manage your database scheme's evolution through independent versions.  For this example we will assume the following directory structure:  +- APPPATH/\n| +- migrations/\n| | +- 001_add_blog.php\n| | +- 002_add_posts.php  A library could use a database scheme like  Ion Auth ,  Community Auth , etc. Here's an example:  +- APPPATH\n| +- libraries/\n| | +- fooLib/\n| | | +- migrations\n| | | | +- 001_add_session.php\n| | | | +- 002_add_other_stuff.php  In order to run this migrations, include the  --path  argument:  php craftsman migrate:latest --path= application/libraries/fooLib   And your migrations are now independent. In your database you can see that every module have an assigned version:  mysql  SELECT * FROM ci_migrations;\n\n+---------------+---------+\n| module        | version |\n+---------------+---------+\n| ci_system     |       2 |\n| foolib        |       2 |\n+---------------+---------+  Also you can change the module name in the database with the  --name  argument:  php craftsman migrate:latest --name= foo  --path= application/libraries/fooLib", 
            "title": "Modular Migrations"
        }, 
        {
            "location": "/contributions/", 
            "text": "This project welcomes and depends on contributions from all \nCodeigniter Developers\n.\n\n\nContributions can be made in a number of ways, a few examples are:\n\n\n\n\nCode patches via pull requests\n\n\nDocumentation improvements\n\n\nBug reports and patch reviews\n\n\n\n\nReporting an Issue\n#\n\n\nPlease include as much detail as you can. Let us know your platform and Craftsman CLI versions. If the problem is visual (for example: a generator design issue, etc.) please add a screenshot and if you get an error please include the the full traceback.\n\n\nSubmitting Pull Requests\n#\n\n\nOnce you are happy with your changes or you are ready for some feedback, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature.", 
            "title": "Contributions"
        }, 
        {
            "location": "/contributions/#reporting-an-issue", 
            "text": "Please include as much detail as you can. Let us know your platform and Craftsman CLI versions. If the problem is visual (for example: a generator design issue, etc.) please add a screenshot and if you get an error please include the the full traceback.", 
            "title": "Reporting an Issue"
        }, 
        {
            "location": "/contributions/#submitting-pull-requests", 
            "text": "Once you are happy with your changes or you are ready for some feedback, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature.", 
            "title": "Submitting Pull Requests"
        }
    ]
}